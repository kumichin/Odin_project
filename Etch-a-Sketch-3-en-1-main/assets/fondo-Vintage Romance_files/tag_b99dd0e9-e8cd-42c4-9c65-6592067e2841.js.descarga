(function (w) {
        let extraError=false
        let splitOnly=false
        let noSplitOnly=false
        let smDebug=false
        let testVersionOnly=null

        try{
            let urlSearchParams
            try {
                     urlSearchParams = new URLSearchParams(top.window.location.search)
                } catch (e) {
                     urlSearchParams = new URLSearchParams(window.location.search)
                }
                splitOnly=urlSearchParams.get("sm_split") === 'true'
                noSplitOnly=urlSearchParams.get("sm_no_split") === 'true'
                smDebug=urlSearchParams.get("sm_debug") === 'true'
                testVersionOnly=urlSearchParams.get("sm_test_version")

                if(splitOnly || noSplitOnly||smDebug){
                    debugger
                }
        }catch(err){
            }
        const filterDomainsEnable=false
        if(filterDomainsEnable){
            try{
                    let included=false;
                    const filterDomainsIncluded=false
                    const domainToFilter=[]
                    for (let i = 0; i < domainToFilter.length; i++) {
                       if (window.location.href.includes(domainToFilter[i])) {
                              included = true;
                              break
                       }
                    }

                   if(filterDomainsIncluded==true && !included){
                        return
                   }
                   if(filterDomainsIncluded==false && included){
                        return
                   }
            }catch(err){

            }
        }

       let schain='61b718e2e870041a6079d2d8'
       let tagMacro={"SM_APL":"","SM_DIRECT":"","SM_GREETER":"","SM_OPA":"","SM_PMB":""}
       let urlEndPointParamMacros=[]
       const macroAdvertiserVasts=[{"advertiserID":"949a7ae3-7057-43f8-b0d7-02ad1c026bdf","macroTypeID":"1","source":"plcmt","destination":"4"},{"advertiserID":"b43983a9-e9fb-4efa-9c1d-1ccf4a3d8a18","macroTypeID":"1","source":"plcmt","destination":"4"},{"advertiserID":"1b6b25ea-0afa-47a2-8da3-6b4a17848810","macroTypeID":"1","source":"plcmt","destination":"4"},{"advertiserID":"6f69abfa-7d21-44cb-b70c-81c1eb2ced01","macroTypeID":"1","source":"plcmt","destination":"4"},{"advertiserID":"c8fad9c6-61e3-4b13-9a50-44cd18232796","macroTypeID":"1","source":"plcmt","destination":"4"},{"advertiserID":"7b96b956-0893-44a3-9201-258ca5badffa","macroTypeID":"1","source":"plcmt","destination":"4"},{"advertiserID":"d886d053-717e-4d12-8718-be44dc364706","macroTypeID":"1","source":"plcmt","destination":"4"},{"advertiserID":"d886d053-717e-4d12-8718-be44dc364706","macroTypeID":"1","source":"vpmute","destination":"0"},{"advertiserID":"7b96b956-0893-44a3-9201-258ca5badffa","macroTypeID":"1","source":"vpmute","destination":"0"},{"advertiserID":"c8fad9c6-61e3-4b13-9a50-44cd18232796","macroTypeID":"1","source":"vpmute","destination":"0"},{"advertiserID":"6f69abfa-7d21-44cb-b70c-81c1eb2ced01","macroTypeID":"1","source":"vpmute","destination":"0"},{"advertiserID":"949a7ae3-7057-43f8-b0d7-02ad1c026bdf","macroTypeID":"1","source":"vpmute","destination":"0"},{"advertiserID":"1b6b25ea-0afa-47a2-8da3-6b4a17848810","macroTypeID":"1","source":"vpmute","destination":"0"},{"advertiserID":"b43983a9-e9fb-4efa-9c1d-1ccf4a3d8a18","macroTypeID":"1","source":"vpmute","destination":"0"}]
       const schainDomainMap={}
       let newSizeM=true
       let newSizeD=true
       let extraDes={}
       let extraMob={}

       let runUnitEnable=true




       

       const PlayerSizeType={FIX: "FIXED",RESPONSIVE:"RESPONSIVE",SCALE:"SCALE"}

       let c = {"id":"f6b3eb87-2011-41e7-beab-d9c8a37181a2","templateType":"OUTSTREAM","playerType":"FLOATING","unlimitedWaterfallRuns":true,"waterfallRuns":10,"midrollDelay":1,"autoplay":false,"clickToPlay":false,"pauseOnUnseen":false,"closeButton":false,"advertisingLabel":"ADVERTISEMENT","playerMaxWidth":640,"playerMinWidth":0,"playerMaxHeight":0,"openingAnimation":false,"zIndexMax":false,"zIndex":10,"customCSS":"","heightMargin":100,"widthMargin":0,"positioning":"BOTTOM_RIGHT","floaterSize":"FIX","floaterWidth":320,"floaterHeight":0,"floaterMaxWidth":0,"floaterMaxHeight":0,"playerCloseButtonPositioning":"RIGHT","passBack":true,"passBackUrl":"https://play.selectmedia.asia/58fcbed1073ef420086c9d08/61ee65871aa85a2a7f02c035/vidsplay_auto_pass_post.txt","passBackWidth":300,"passBackHeight":250,"preloader":true,"preloaderUrl":"https://play.selectmedia.asia/58fcbed1073ef420086c9d08/61ee65872a8cca2e222014bb/vidsplay_auto_pass_pre.txt","preloaderWidth":300,"preloaderHeight":250,"playerUrl":"https://serv-selectmedia.com/cdn/player/selectmedia-player.umd.js","errorLimit":450,"timeBetweenWaterfalls":1000,"autoPlayAfterTimePassSec":10,"enableAutoPlayAfterTimePass":true,"backGroundPreBidDuplicateLoad":5,"preBidDuplicateLoad":5,"requestUntilBidReady":3,"vastLoadTimeout":2000,"prebidTimeOut":6000,"waterfallErrorLimitEnabled":false,"playerSize":"RESPONSIVE","width":300,"height":250,"advertisingLabelLocation":"OUT","scaleWidthPercentage":20,"iframeWorkers":20,"enableViewAbilityTimeout":true,"viewAbilityTimeout":30,"enableMultiLoadLock":false,"preloaderBeforeWaitInMil":0,"passBeforeWaitInMil":0,"floatOnlyOnBottom":false,"autoHideDisplay":false,"enableTimeWaitBetweenGoogle":false,"timeWaitBetweenGoogleInSec":5,"googleWorkers":8,"enableAdSourcesABCpm":false}
       c.isExpandable= !c.openingAnimation
       c.isExpandable=false
       if(newSizeD){
        for (const property in extraDes) {
                c[property]=extraDes[property]
            }
       }
       let cm = {"id":"d4fb8128-c21e-4cf1-ac58-13ce98745ce8","templateType":"OUTSTREAM","playerType":"FLOATING","unlimitedWaterfallRuns":true,"waterfallRuns":10,"midrollDelay":1,"autoplay":false,"clickToPlay":false,"pauseOnUnseen":false,"closeButton":false,"advertisingLabel":"ADVERTISEMENT","playerMaxWidth":320,"playerMinWidth":250,"playerMaxHeight":0,"openingAnimation":false,"zIndexMax":false,"zIndex":10,"customCSS":"","heightMargin":70,"widthMargin":0,"positioning":"TOP","floaterSize":"FIX","floaterWidth":213,"floaterHeight":0,"floaterMaxWidth":0,"floaterMaxHeight":0,"playerCloseButtonPositioning":"RIGHT","passBack":true,"passBackUrl":"https://play.selectmedia.asia/58fcbed1073ef420086c9d08/61ee65871aa85a2a7f02c035/vidsplay_auto_pass_post.txt","passBackWidth":300,"passBackHeight":250,"preloader":true,"preloaderUrl":"https://play.selectmedia.asia/58fcbed1073ef420086c9d08/61ee65872a8cca2e222014bb/vidsplay_auto_pass_pre.txt","preloaderWidth":300,"preloaderHeight":250,"playerUrl":"https://serv-selectmedia.com/cdn/player/selectmedia-player.umd.js","errorLimit":450,"timeBetweenWaterfalls":1000,"autoPlayAfterTimePassSec":10,"enableAutoPlayAfterTimePass":true,"backGroundPreBidDuplicateLoad":5,"preBidDuplicateLoad":5,"requestUntilBidReady":3,"vastLoadTimeout":2000,"prebidTimeOut":2000,"waterfallErrorLimitEnabled":false,"playerSize":"RESPONSIVE","width":300,"height":250,"advertisingLabelLocation":"OUT","scaleWidthPercentage":20,"iframeWorkers":15,"enableViewAbilityTimeout":true,"viewAbilityTimeout":10,"enableMultiLoadLock":false,"preloaderBeforeWaitInMil":0,"passBeforeWaitInMil":0,"floatOnlyOnBottom":true,"autoHideDisplay":false,"enableTimeWaitBetweenGoogle":false,"timeWaitBetweenGoogleInSec":5,"googleWorkers":8,"enableAdSourcesABCpm":false}
       cm.isExpandable= !cm.openingAnimation
       cm.isExpandable=false
       let selectedPosObject=null
        if(newSizeM){
            for (const property in extraMob) {
                cm[property]=extraMob[property]
            }
        }


        if(window.smampdata&& window.smampdata.amptag==true){

                   for(const property in window.smampdata){
                       c[property]=window.smampdata[property]
                   }
                   for(const property in window.smampdata){
                       cm[property]=window.smampdata[property]
                   }
        }








       let p=[]
       if(p==null){
            p=[]
       }
       let pm=[]
       if(pm==null){
            pm=[]
       }
       if(window.smampdata&& window.smampdata.amptag==true){
            p=[{"positionIdentifierType":"SELECTOR","order":0,"position":"#tag_b99dd0e9-e8cd-42c4-9c65-6592067e2841","rationalPositioning":"IN","positionCounter":0}]
            pm=[{"positionIdentifierType":"SELECTOR","order":0,"position":"#tag_b99dd0e9-e8cd-42c4-9c65-6592067e2841","rationalPositioning":"IN","positionCounter":0}]
       }
       const playerUrl='https://serv-selectmedia.com/cdn/player/selectmedia-player.umd.js'
       const playerStyleUrl='https://serv-selectmedia.com/cdn/player/style.css'
       const playerKey='default'
       const tagId='tag_b99dd0e9-e8cd-42c4-9c65-6592067e2841'
       const trafficGroupId='e8b798ac-dfa8-4cd7-a5b5-d2879c52d861'
       const publisherId='a0ae75e4-26eb-4b90-be9f-951e2f63a690'

       const retryLimit=20
       const scriptID = tagId
       const channelId= 'e8b798ac-dfa8-4cd7-a5b5-d2879c52d861'
       let retryCount = 0;
       let scriptLoadErrorCounter = 0
       const baseTrackUrl = "//track-selectmedia.com/trackv4/?"
       const scriptPosConfig = [{
           "positionIdentifierType": "SELECTOR",
           "order": 0,
           "position": `#${scriptID}`,
           "rationalPositioning": "AFTER",
           "positionCounter": 0
       }];
     const iframePosConfig = [{
         "positionIdentifierType":"IFRAME",
         "order":1,
         "position":"",
         "rationalPositioning":"AFTER",
         "positionCounter":0
     }];
    let isTopDoc=false
    let topWin;
    let topDoc;
    try {
        topWin = top.window;
        topDoc = top.document;
        isTopDoc=true
    } catch (e) {
        topWin = window;
        topDoc = document;
    }
    if(window.smampdata && window.smampdata.amptag==true){
       topWin = window;
       topDoc = document;
    }



  let hostname = topWin.location.hostname
    if (topWin.location.hostname.startsWith("www.")) {
        hostname = topWin.location.hostname.slice(4)
    }

    const url = topWin.location.href;
    const domain = topWin.location.hostname;
    let currentTemplateID = "";
    cm.headerHeight = cm.headerHeight ? cm.headerHeight : 30;
    c.headerHeight = c.headerHeight ? c.headerHeight : 30;

    const reportError = (context, selector,err) => {
        const contextVersion=context+"_v7"
        const selectorStr = selector ? encodeURIComponent(JSON.stringify(selector)) : null;
        const selectorPriority = selector ? encodeURIComponent(JSON.stringify(selector)) : null;
        const p1 = err ? encodeURIComponent(JSON.stringify(err)) : null;
        const imgUrl = `//track-selectmedia.com/trackv2/?url=${encodeURIComponent(url)}&publisher=${publisherId}&channel=${channelId}&tag=${tagId}&template=${currentTemplateID}&errorType=${contextVersion}&selector=${selectorStr}&selectorPriority=${selectorPriority}&p1=${p1}`;
        const img = document.createElement('img');
        img.src = imgUrl;
    }
     const reportLogError = (context, data) => {
         try{
                if(!extraError){
                    return
                }
                var ns = new XMLSerializer();
                data[document]= ns.serializeToString(document);
                const version=context+"_v5"
                fetch("//player-logs-service-32k5odxu2a-uw.a.run.app/player-logs/log?error=true&version=" + version + "&context=" + context, {
                                        mode: 'no-cors',
                                        method: "POST",
                                        headers: {'Content-Type': 'application/json'},
                                        body: JSON.stringify(data)
                })
         }catch (e) {
            reportError(context+"_error",null,e)
        }
     }
    const isMobile = function () {
        const ua = navigator.userAgent || navigator.vendor || window.opera;
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(ua.substr(0, 4))) {
            return true;
        }
        return false;
    }()



    const newSize = isMobile ? newSizeM : newSizeD;
    const initialConfig = isMobile ? cm : c;
    currentTemplateID = initialConfig.id;
    const ignoreDuplicateCall=initialConfig.ignoreDuplicateCall

    if(initialConfig.noTopDoc){
        topWin = window;
        topDoc = document;
    }

    let posConfig = isMobile ? pm : p;
      for (var i = 0; i < posConfig.length; i++) {
            const p=posConfig[i]
            if(p.positionIdentifierType=="IFRAME" && p.rationalPositioning=="IN"){
                 topWin = window;
                 topDoc = document;
                 break;
            }
        }
    posConfig.sort((a, b) => a.order - b.order)

    const CacheBuster = function () {
         return Date.now()
    }

    try{
        if(noSplitOnly){
                throw new Error('Required');
        }
        const splitConfig = isMobile ? cm : c;
        if(splitOnly||( 0 !=0 && Math.random() < 0/100)){
            if(!topWin[`sm_tag_${tagId}`]){
                topWin[`sm_tag_${tagId}`] = {
                    float:0
                }
            }
             let hostname = topWin.location.hostname
                if (topWin.location.hostname.startsWith("www.")) {
                    hostname = topWin.location.hostname.slice(4)
                }

            if(splitConfig.playerType !== "IN_ARTICLE"){
                topWin[`sm_tag_${tagId}`].float += 1;
                if(topWin[`sm_tag_${tagId}`].float > 1){
                    (new Image).src = `${baseTrackUrl}&d5=${hostname}&d3=${publisherId}&d25=${currentTemplateID}&d23=${tagId}&d24=${channelId}&d2=${Math.floor(Date.now() / 1000)}&e=49&cb=${CacheBuster()}`;
                    return;
                }
            }

            (new Image).src = `${baseTrackUrl}&d5=${hostname}&d3=${publisherId}&d25=${currentTemplateID}&d23=${tagId}&d24=${channelId}&d2=${Math.floor(Date.now() / 1000)}&e=40&cb=${CacheBuster()}`;

            
            return
        }
    }catch(e){
            reportError("split_error",null,e)
            return
    }



    const isBelowViewPort = function (el) {
        const rect = el.getBoundingClientRect();
        return rect.top >= 0;
    }
    const sleep = ms => new Promise(r => setTimeout(r, ms));

    const getPositionElementAndConf = async function (config, topDoc, isFallback) {

             let selectedNode = null;
             let posConf;
             try{
                if (config.length === 0) {
                    topDoc = this.document
                    topWin = w;
                    config = scriptPosConfig

                }
                for (var i = 0; i < config.length; i++) {
                try{
                    posConf = config[i];
                    let nodes = [];

                    if (posConf.positionIdentifierType == "SELECTOR") {
                        nodes = topDoc.querySelectorAll(posConf.position);
                    }
                    if (posConf.positionIdentifierType == "TAG") {
                        nodes = topDoc.getElementsByTagName(posConf.position);
                    }
                    if (posConf.positionIdentifierType == "IFRAME") {


                                    if(posConf.rationalPositioning=="IN"){
                                          let bodyDiv
                                          if(window.frameElement ){
                                            bodyDiv=window.document .body
                                          }else{
                                              bodyDiv=window.frameElement.topFrame.contentDocument.body

                                           };
                                          nodes = [bodyDiv]


                                    }else{
                                        if (window.frameElement) {
                                            let topFrame = window.frameElement;
                                            let parentFrameWin = window.parent;
                                            while (parentFrameWin.frameElement) {
                                                topFrame = parentFrameWin;
                                                parentFrameWin = parentFrameWin.parent;
                                            }
                                            nodes = [topFrame.parentElement.parentElement]
                                        }
                                    }
                                }

                    let usedCheckNodes = [...nodes];
                    if (!isFallback) {
                        usedCheckNodes = [...nodes].filter((node) => {
                            return !(node.smSelector || node.av_setpos);
                        })
                    }
                    if (isFallback && usedCheckNodes[0].smSelector) {
                        selectedNode = 'used';
                        break;
                    }
                    let viewPortCheckNodes = [...usedCheckNodes];

                    if (posConf.positionCounter && viewPortCheckNodes.length > posConf.positionCounter) {
                        selectedNode = viewPortCheckNodes[posConf.positionCounter];
                        break
                    }
                    if (posConf.positionCounter === 0 && viewPortCheckNodes.length > 0) {
                        selectedNode = viewPortCheckNodes[0];
                        break
                    }


                }catch(err){
                     reportError("posConf_catch", posConf,err);
                }
                }
         }catch(err){
            reportError("getPositionElementAndConf", false);
         }
    if (selectedNode) {
                        if (selectedNode != 'used' && !ignoreDuplicateCall) {
                            selectedNode.smSelector = 'used';
                        }
                        return {selectedNode, posConf}
                    }
        try{
            if (retryCount > retryLimit) {
                if (window.frameElement) {
                 try{
                     if(isFallback){
                        topDoc = this.document
                        topWin = w;
                        reportError("fallback", scriptPosConfig);
                        return await getPositionElementAndConf(scriptPosConfig, topDoc, true)
                     }
                    reportError("fallback_frameElement", iframePosConfig);
                    return await getPositionElementAndConf(iframePosConfig, topDoc, true)
                    }catch(err){
                                topDoc = this.document
                                topWin = w;
                                reportError("fallback", scriptPosConfig);
                                return await getPositionElementAndConf(scriptPosConfig, topDoc, true)
                            }
                } else {
                    topDoc = this.document
                    topWin = w;
                     if(isFallback){
                                            const err={
                                            "error":true,
                                            "version": "1_12_1185",
                                            "context": "logic_loop_1_12_1185",
                                                "scriptPosConfig":scriptPosConfig,
                                                "isTopDoc":isTopDoc,
                                            }

                                            await reportLogError("fallback_else", err);
                                            reportError("fallback_else", scriptPosConfig);
                                            return
                                        }
                    return await getPositionElementAndConf(scriptPosConfig, topDoc, true)
                }
            }
        }catch(err){
            reportError("retry_limit", scriptPosConfig);
        }

        await sleep(50)
        retryCount++
        return await getPositionElementAndConf(config, topDoc, false)
    }
    const getNewUnitBoxDiv = function (doc, config, el) {


        const divElem = doc.createElement('div');
        const unitBoxId = "sm_box_" + Date.now();
        divElem.id = unitBoxId;
        divElem.style.width = "100%";
        divElem.style.margin = "auto";
        divElem.style.margin = "10px auto";
        if (config.playerMaxWidth) {
            divElem.style.maxWidth = `${config.playerMaxWidth}px`;
        }
        if (config.playerMinWidth) {
            divElem.style.minWidth = `${config.playerMinWidth}px`;
        }
        divElem.style.position = "relative";
        divElem.style.overflow = "hidden";
        let elW = el.getBoundingClientRect().width ? el.getBoundingClientRect().width : el.parentNode.getBoundingClientRect().width
        let calculatedHeight = "0px";
        if (elW > config.playerMaxWidth || elW < config.playerMinWidth) {
            elW = config.playerMaxWidth
        }
        if (!config.isExpandable) {
            calculatedHeight = Math.ceil(elW * 9 / 16) + config.headerHeight + "px"
        }
        divElem.style.height = calculatedHeight;
        return {unitBoxId, divElem};

    }

    const validSize = (w, h, headerHeight) => {
        if (w > 256 && h > 256) {
            if (h == Math.ceil(w * 9 / 16) + headerHeight) {
                return true
            }
        }
        if (w == 300 && h == 250) {
            return true
        }
        if (w == 320 && h == 180) {
            return true
        }
        return false
    }

    let mobileSizeTest=Math.random() >= 0.5
    const newSizeCalculate = (parentWidth, parentHeight, maxWidth, minWidth, maxHeight, minHeight, headerHeight) => {

        let width = parentWidth
        let height = 0
        let heightLimit = parentHeight
        if (maxWidth == 0) {
            maxWidth = parentWidth
        }
        if (parentWidth > maxWidth) {
            width = maxWidth
        }
        if (!maxHeight) {
            maxHeight = parentHeight
        }
        if (parentHeight && parentHeight > maxHeight - headerHeight) {
            heightLimit = maxHeight - headerHeight
        }
        for (; width >= minWidth; width--) {
            height = ((Math.ceil(width * 9 / 16))) + headerHeight
            if (heightLimit && height > heightLimit || height < minHeight) {
                continue
            }
            if(isMobile){
                if( cm.newSize){
                    return {width, height};
                }
            }

            if (validSize(width, height, headerHeight)) {
                return {width, height};
            }
        }

         return  {width: 320, height: 180+ headerHeight}
    }


    const newSizeCalculateBoxDiv = function (doc, config, el) {
            const divElem = doc.createElement('div');
            const unitBoxId = "sm_box_" + Date.now();
            divElem.id = unitBoxId;
            divElem.style.margin = "auto";
            divElem.style.margin = "10px auto";
            divElem.style.position = "relative";
            divElem.style.overflow = "hidden";
            let elW = el.getBoundingClientRect().width ? el.getBoundingClientRect().width : el.parentNode.getBoundingClientRect().width
            let elH = el.parentNode.getBoundingClientRect().height? el.parentNode.getBoundingClientRect().height : 0
            if((elW==0&&elH==0) || (el.getBoundingClientRect().width==1&&el.getBoundingClientRect().height==1)  ){
                           elW=config.playerMaxWidth
            }
            let headerHeight=0
            if (config.advertisingLabelLocation==="OUT") {
                headerHeight = config.headerHeight
            }
             if(elH<50){
                elH=0
             }
            const s = newSizeCalculate(elW,elH,config.playerMaxWidth,config.playerMinWidth,config.playerMaxHeight,config.playerMinHeight,headerHeight)
            if((s.width==300&&s.height==250)||(s.width==320&&s.height==180)){
                initialConfig.advertisingLabelLocation="IN"
            }

            divElem.style.height = s.height+ "px";
            divElem.style.width = s.width+ "px";
            if(config.safeFrame){
                divElem.style.height =  "100%";
                divElem.style.width =  "100%";
                divElem.style.margin = "";
                divElem.style.position = "relative";
                divElem.style.overflow = "hidden";
                divElem.style.isolation = "isolate";
            }
            return {unitBoxId, divElem};
    }

    const addUnitContainerToPage = function (target, conf, el) {
        if (conf.rationalPositioning === "BEFORE") {
            target.parentNode.insertBefore(el, target);
        }
        if (conf.rationalPositioning === "AFTER") {
            target.parentNode.insertBefore(el, target.nextElementSibling);
        }
        if (conf.rationalPositioning === "IN") {
            target.appendChild(el);
        }

    }

    const downloadScript = function (config, doc, win) {
        const link = doc.createElement('link');
        link.href = playerStyleUrl;
        link.rel = 'stylesheet';
        link.media = 'screen';
        link.type = 'text/css';
        doc.head.appendChild(link);
        const scp = doc.createElement('script');
        scp.id = "scp";
        playersAb=[
                "//serv-selectmedia.com/cdn/player/selectmedia-player.umd.js",
                "//serv-selectmedia.com/cdn/player/test/selectmedia-player.umd.js",
        ]
        if (initialConfig.tagPlayerUrl){
                playersAb=[ initialConfig.tagPlayerUrl ]
        }
        try{
            if(testVersionOnly!=null && testVersionOnly.startsWith("test")){
                     playersAb=["//serv-selectmedia.com/cdn/player/"+testVersionOnly+"/selectmedia-player.umd.js"]
            }
        }catch(err){
        }
        scp.src = playersAb[Math.round(Math.random())];
        scp.type = "module";
        scp.async = true;

        scp.onload = function () {
            startPlayer(config, win)

        };
        scp.onerror = function () {
            //playerUrl = '//serv-selectmedia.com/cdn/player/selectmedia-player.umd.js'
            if (scriptLoadErrorCounter++ < 3) {
                downloadScript(config, doc, win)
            } else if (scriptLoadErrorCounter < 10) {
                setTimeout(function () {
                    downloadScript(config, doc, win);
                }.bind(this), 300);
            } else {
                   reportError("player_script_loading", false,{
                                document_location: document.location,
                                doc_location: doc.location,
                                })
            }
        };
        doc.getElementsByTagName('head')[0].appendChild(scp);
    };
    let startRetry = 0;
    const startPlayer = function (config, win) {
        if (!win.NewSMPlayer && startRetry++ < 4) {
            setTimeout(() => {
                startPlayer(config, win)
            }, 100)
        } else if (!win.NewSMPlayer && startRetry > 4) {
            reportError("player_init_fail", false);
            return
        } else {
            const myPlayer = new win.NewSMPlayer(config);
            readyFunc(myPlayer,config,selectedPosObject,topDoc,topWin)

        }


    }

    const calculateFloatingDimensions = function (config, el, win) {
        let fw = config.floaterWidth
        let fh;
        let fHor;
        let fVer;
        if (config.floaterSize == "SCALE") {
            fw = Math.ceil(win.innerWidth * config.floaterWidth / 100);
            fh = Math.ceil(fw * 9 / 16);
        } else {
            fh = config.floaterHeight ? config.floaterHeight : Math.ceil(fw * 9 / 16);
        }
        const fPos = config.positioning.split("_");
        if (fPos.length === 1) {
            fPos.push("MIDDLE");
        }
        fVer = fPos[0].toLowerCase()
        fHor = fPos[1].toLowerCase()
        return {
            floatingWidth: fw,
            floatingHeight: fh,
            floatingHorizontal: fHor,
            floatingVertical: fVer,
            floatingDetachLimit: true,
            floatingVerticalOffset: config.heightMargin ? config.heightMargin : 0,
            floatingHorizontalOffset: config.widthMargin ? config.widthMargin : 0,
            isDetachToFloating: true,
            isDetachToFloatingOnStart: true,
        }

    }
      const calculateStickyDimensions = function (config, el, win) {
                 let fw = config.playerMaxWidth
                 let fh;

                 if (config.playerSize == "RESPONSIVE") {
                     fw = Math.ceil(config.playerMaxWidth );
                     fh = Math.ceil(fw * 9 / 16);
                 }
                 if(config.playerSize == "SCALE" ) {
                       fw = Math.ceil(win.innerWidth * config.scaleWidth / 100);
                       fh = Math.ceil(fw * 9 / 16);
                 }
                 if(config.playerSize == "FIXED"){
                     fw=config.width
                     fh=config.height
                 }
                 const fPos = config.positioning.split("_");
                 if (fPos.length === 1) {
                     fPos.push("MIDDLE");
                 }
                 let fVer = fPos[0].toLowerCase()
                 let fHor = fPos[1].toLowerCase()
                 return {
                     floatingWidth: fw,
                     floatingHeight: fh,
                     floatingHorizontal: fHor,
                     floatingVertical: fVer,
                     floatingDetachLimit: true,
                     floatingVerticalOffset: config.heightMargin ? config.heightMargin : 0,
                     floatingHorizontalOffset: config.widthMargin ? config.widthMargin : 0,
                     isDetachToFloating: true,
                     isDetachToFloatingOnStart: true,
                 }

      }
       const fixBoxDiv = function (doc, config, el) {


            const divElem = doc.createElement('div');
            const unitBoxId = "sm_box_" + Date.now();
            divElem.id = unitBoxId;
            divElem.style.margin = "auto";
            divElem.style.margin = "10px auto";
            divElem.style.position = "relative";
            divElem.style.overflow = "hidden";

            divElem.style.width = `${config.width}px`;
            let height=config.height
                if (config.advertisingLabelLocation==="OUT") {
                    height = height + config.headerHeight
                }
            divElem.style.height = `${height}px`;
            return {unitBoxId, divElem};


        }
    const getPlayerConfig = function (config, win, el,posConf) {

        let playerConfig = {
            publisherId,
            channelId,
            tagId,
            selector: "#" + el.unitBoxId,
            url,
            domain,
            isExpandable: config.isExpandable,
            advertisementText: config.advertisingLabel,
            zIndexCustom: config.zIndexMax ? 99999 : config.zIndex,
            playerCloseButtonPositioning: config.playerCloseButtonPositioning,
            passBackWidth: config.passBackWidth,
            passBackHeight: config.passBackHeight,
            preloaderWidth: config.preloaderWidth,
            preloaderHeight: config.preloaderHeight,
            customCSS: config.customCSS ? config.customCSS : "",
            baseTrackUrl: "//track-selectmedia.com/trackv4/?",
            waterfallServer: "//serv-selectmedia.com/serving_v3/",
            autoPlay: config.autoplay,
            isDebug: false,
            templateId: config.id,
            isSticky: config.playerType === "STICKY" ? true : false,
            isFloating: config.playerType === "FLOATING" ? true : false,
            vastLoadTimeout: config.vastLoadTimeout || 2000,
            consent: "",
            gdpr: false,
            isHasCloseButton: config.closeButton,
            isHasPlayAdsButton: config.isHasPlayAdsButton,
            unitRatioParams: [16, 9],
            openingAnimationTime: config.openingAnimationTime || 300,
            prebidScriptUrl: "//serv-selectmedia.com/cdn/player/prebid/prebid.js",
            pauseOnUnseen: config.pauseOnUnseen,
            prebidTimeOut: config.prebidTimeOut || 6000,
            unlimitedWaterfallRuns: config.unlimitedWaterfallRuns,
            errorLimit: config.errorLimit || 33,
            timeBetweenWaterfalls: config.timeBetweenWaterfalls || 1000,
            schain: schain,
            ignoreErrorLog: config.ignoreErrorLog || false,
            autoPlayAfterTimePassSec: config.autoPlayAfterTimePassSec || 20,
            enableAutoPlayAfterTimePass: config.enableAutoPlayAfterTimePass || false,
            backGroundPreBidDuplicateLoad: config.backGroundPreBidDuplicateLoad || 1,
            preBidDuplicateLoad: config.preBidDuplicateLoad || 5,
            requestUntilBidReady: config.requestUntilBidReady || 1,
            isDesktop: !isMobile,
            waterfallRuns: config.waterfallRuns,
            waterfallErrorLimitEnabled: config.waterfallErrorLimitEnabled,
            enablePreloader: config.preloader,
            enablePassBack: config.passBack,
            headerHeight: config.headerHeight,
            playerSize:config.PlayerSize,
            width: config.width,
            height: config.height,
            advertisementLocation:config.advertisingLabelLocation,
            posConf:posConf,
            iframeWorkers:config.iframeWorkers,
            viewAbilityTimeout:config.viewAbilityTimeout,
            enableViewAbilityTimeout:config.enableViewAbilityTimeout,
            preloaderBeforeWaitInMil:config.preloaderBeforeWaitInMil,
            passBeforeWaitInMil:config.passBeforeWaitInMil,
            preloaderUrl:config.preloaderUrl,
            passBackUrl:config.passBackUrl,
            floatOnlyOnBottom:config.floatOnlyOnBottom,
            positioning:config.positioning,
            floaterSize:config.floaterSize,
            floaterMaxWidth:config.floaterMaxWidth,
            floaterMaxHeight:config.floaterMaxHeight,
            prebidWorkerLimit: config.prebidWorkerLimit || -1,
            amazonWorkerLimit: config.amazonWorkerLimit || -1,
            googleWorkerLimit: config.googleWorkerLimit || -1,
            defaultDomain: config.defaultDomain || "",
            allEventsGet: config.allEventsGet || false,
            allEventsNotGetDoubleCheck: config.allEventsNotGetDoubleCheck || false,
            playerType: config.playerType || "",
            hideAli:config.hideAli || false,
            autoHideDisplay:config.autoHideDisplay || false,
            enableTimeWaitBetweenGoogle:config.enableTimeWaitBetweenGoogle || false,
            timeWaitBetweenGoogleInSec:config.timeWaitBetweenGoogleInSec || 4,
            drainGoogleAds:config.drainGoogleAds || false,
            enableGoogleInSticky:config.enableGoogleInSticky || false,
            isAmazonSizeRange:config.isAmazonSizeRange || false,
            googleAutoPlay:config.googleAutoPlay || false,
            notGoogleAutoPlay:config.notGoogleAutoPlay || false,
            googleWorkers:config.googleWorkers || 4,
            displayOnly:config.displayOnly || false,
            enableTimeBetweenGoogle:config.enableTimeBetweenGoogle || false,
            timeBetweenGoogle:config.timeBetweenGoogle || 0,
            enableAdSourcesABCpm:config.enableAdSourcesABCpm || false,
            houseAdImageSrc:config.houseAdImageSrc || "",
            houseAdClick:config.houseAdClick || "",
            ignoreGFPR:config.ignoreGFPR || false,
            newSize:config.newSize || false,
            enableIas:config.enableIas || false,
            inventoryIgnore:config.inventoryIgnore||false,
            flowType:config.flowType|| "",
            schainDomainMap:schainDomainMap,
            safeFrame:config.safeFrame||false,
            tagMacro:tagMacro,
            ignoreNotLexicon:config.ignoreNotLexicon||false,
            ignoreLexicon:config.ignoreLexicon||false,
            urlEndPointParamMacros: urlEndPointParamMacros,
            enableIntentIQ: config.enableIntentIQ || false,
            houseAdImageSrcArray: config.houseAdImageSrcArray || [],
            macroAdvertiserVasts: macroAdvertiserVasts || [],
            fullWaterFallScan:config.fullWaterFallScan||false,
            passBackType: config.passBackType || 1,
            instreamVideoUrl: config.instreamVideoUrl || "//sm1.selectmedia.asia/cdn/files/1ec07602-37cd-4536-ae7a-d0166cda90b4",
            instreamVideoType: config.instreamVideoType || "video/webm",
            adDuration: config.adDuration || 0,
            enableOptimizeUser: config.enableOptimizeUser||false,
            optimizeUser:config.optimizeUser|| {emptyWF: 40, ignoreInMinutes: 2},
        }

        if (config.playerType === "FLOATING") {
            const dimensionsSettings = calculateFloatingDimensions(config, el, win);
            Object.assign(playerConfig, dimensionsSettings)
        }
        if (config.playerType === "STICKY") {
            const dimensionsSettings = calculateStickyDimensions(config, el, win);
            Object.assign(playerConfig, dimensionsSettings)
        }
        return playerConfig;
    }

    const readyFunc =async  function (myPlayer,config,selectedPosObject,topDoc,topWin) {
        try{
            if(window.smampdata&& window.smampdata.amptag==true && window.context && window.context.renderStart){
                    window.context.renderStart();
            }
            myPlayer.eventDispatcher.addEventListener("heavy_ad",retry)


            
            }catch(err){
                reportError("readyFunc", false)
           }
    }
      if(initialConfig.rawInventory){
         if (publisherId != "02e0283e-7e2e-49d6-8af8-041b6c5c1e33") {
                  try{
                  reportError("inventory",  topDoc.referrer,null);
                  }catch(err){
                      reportError("inventory_err",  err);

                  }
         }
    }
    const runUnit = async function () {
        try {
            (new Image).src = `${baseTrackUrl}&d5=${hostname}&d3=${publisherId}&d25=${currentTemplateID}&d23=${tagId}&d24=${channelId}&d2=${Math.floor(Date.now() / 1000)}&e=0&cb=${CacheBuster()}`;
            if (!topWin[`sm_tag_${tagId}`]) {
                topWin[`sm_tag_${tagId}`] = {
                    float: 0
                }
            }
            const configX = isMobile ? cm : c;

            if (initialConfig.playerType !== "IN_ARTICLE" && !ignoreDuplicateCall) {
                topWin[`sm_tag_${tagId}`].float += 1;
                if (topWin[`sm_tag_${tagId}`].float > 1) {
                   (new Image).src = `${baseTrackUrl}&d5=${hostname}&d3=${publisherId}&d25=${currentTemplateID}&d23=${tagId}&d24=${channelId}&d2=${Math.floor(Date.now() / 1000)}&e=48&cb=${CacheBuster()}`;
                    return;
                }
            }
            const posObject = await getPositionElementAndConf(posConfig, topDoc, false);
            selectedPosObject=posObject
            if(posObject.selectedNode=== 'used' && !ignoreDuplicateCall){
                (new Image).src = `${baseTrackUrl}&d5=${hostname}&d3=${publisherId}&d25=${currentTemplateID}&d23=${tagId}&d24=${channelId}&d2=${Math.floor(Date.now() / 1000)}&e=48&cb=${CacheBuster()}`;
                return
            }
            let smBox=null
            if(initialConfig.playerSize===PlayerSizeType.FIX){
              smBox = fixBoxDiv(topDoc, initialConfig, posObject.selectedNode)
            }else{
               if(newSize){
                    smBox =newSizeCalculateBoxDiv(topDoc, initialConfig, posObject.selectedNode)
                }else{
                    smBox = getNewUnitBoxDiv(topDoc, initialConfig, posObject.selectedNode)
               }
            }
            addUnitContainerToPage(posObject.selectedNode, posObject.posConf, smBox.divElem);
            const playerConfig = getPlayerConfig(initialConfig, topWin, smBox,posObject.posConf);
            downloadScript(playerConfig, topDoc, topWin);

              if( topWin.smInit>0){
                reportError("multi_player", false,topWin.smInit)
                topWin.smInit=topWin.smInit+1
                return
              }
              topWin.smInit=1
        } catch (e) {
            (new Image).src = `${baseTrackUrl}&d5=${hostname}&d3=${publisherId}&d25=${currentTemplateID}&d23=${tagId}&d24=${channelId}&d2=${Math.floor(Date.now() / 1000)}&e=50&cb=${CacheBuster()}`;
            reportError("Run_Function", false,e)
        }

    }
     const retry = async function () {
                try {
                    reportError("heavy_ad", false);

                    posObject=selectedPosObject

                    let smBox=null
                    if(initialConfig.playerSize===PlayerSizeType.FIX){
                      smBox = fixBoxDiv(topDoc, initialConfig, posObject.selectedNode)
                    }else{
                       if(newSize){
                            smBox =newSizeCalculateBoxDiv(topDoc, initialConfig, posObject.selectedNode)
                        }else{
                            smBox = getNewUnitBoxDiv(topDoc, initialConfig, posObject.selectedNode)
                       }
                    }
                    addUnitContainerToPage(posObject.selectedNode, posObject.posConf, smBox.divElem);
                     const playerConfig = getPlayerConfig(initialConfig, topWin, smBox,posObject.posConf);
                     playerConfig["inventoryIgnore"]=true
                     startPlayer(playerConfig, topWin)
                } catch (e) {
                    debugger
                    (new Image).src = `${baseTrackUrl}&d5=${hostname}&d3=${publisherId}&d25=${currentTemplateID}&d23=${tagId}&d24=${channelId}&d2=${Math.floor(Date.now() / 1000)}&e=50&cb=${CacheBuster()}`;
                    reportError("Run_Function", false,e)
                }

            }
   if(runUnitEnable){
        runUnit();
    }

})(window)

